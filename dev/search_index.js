var documenterSearchIndex = {"docs":
[{"location":"50-implementation/#Implementation","page":"Implementation","title":"Implementation","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"The way ModuleMixins is implemented, is that we start out with something relatively simple, and build out from that. This means there will be some redudant code. Macros are hard to engineer, this takes you through the entire process.","category":"page"},{"location":"50-implementation/#Prelude","page":"Implementation","title":"Prelude","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| file: src/ModuleMixins.jl\nmodule ModuleMixins\n\nusing MacroTools: @capture, postwalk, prewalk\n\nexport @compose, @for_each\n\n<<spec>>\n<<mixin>>\n<<struct-data>>\n<<compose>>\n<<for-each>>\n\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"To facilitate testing, we need to be able to compare syntax. We use the clean function to remove source information from expressions.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| file: test/runtests.jl\nusing Test\nusing ModuleMixins:\n    @spec,\n    @spec_mixin,\n    @spec_using,\n    @mixin,\n    Struct,\n    parse_struct,\n    define_struct,\n    Pass,\n    @compose,\n    @for_each\nusing MacroTools: prewalk, rmlines\n\nclean(expr) = prewalk(rmlines, expr)\n\n<<test-toplevel>>\n\n@testset \"ModuleMixins\" begin\n    <<test>>\nend","category":"page"},{"location":"50-implementation/#@spec","page":"Implementation","title":"@spec","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"The @spec macro creates a new module, and stores its own AST inside that module.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test-toplevel\n@spec module MySpec\nconst msg = \"hello\"\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\n@testset \"@spec\" begin\n    @test clean.(MySpec.AST) == clean.([:(const msg = \"hello\")])\n    @test MySpec.msg == \"hello\"\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"The @spec macro is used to specify the structs of a model component.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: spec\n\"\"\"\n    @spec module *name*\n        *body*...\n    end\n\nCreate a spec. The `@spec` macro itself doesn't perform any operations other than creating a module and storing its own AST as `const *name*.AST`.\n\nThis macro is only here for teaching purposes.\n\"\"\"\nmacro spec(mod)\n    @assert @capture(mod, module name_\n    body__\n    end)\n\n    esc(Expr(:toplevel, :(module $name\n    $(body...)\n    const AST = $body\n    end)))\nend","category":"page"},{"location":"50-implementation/#@spec_mixin","page":"Implementation","title":"@spec_mixin","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"We now add the @mixin syntax. This still doesn't do anything, other than storing the names of parent modules.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test-toplevel\n@spec_mixin module MyMixinSpecOne\n@mixin A\nend\n@spec_mixin module MyMixinSpecMany\n@mixin A, B, C\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\n@testset \"@spec_mixin\" begin\n    @test MyMixinSpecOne.PARENTS == [:A]\n    @test MyMixinSpecMany.PARENTS == [:A, :B, :C]\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"Here's the @mixin macro:","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: mixin\nmacro mixin(deps)\n    if @capture(deps, (multiple_deps__,))\n        esc(:(const PARENTS = [$(QuoteNode.(multiple_deps)...)]))\n    else\n        esc(:(const PARENTS = [$(QuoteNode(deps))]))\n    end\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"The QuoteNode calls prevent the symbols from being evaluated at macro expansion time. We need to make sure that the @mixin syntax is also available from within the module.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: spec\n\nmacro spec_mixin(mod)\n    @assert @capture(mod, module name_\n    body__\n    end)\n\n    esc(Expr(:toplevel, :(module $name\n    import ..@mixin\n\n    $(body...)\n\n    const AST = $body\n    end)))\nend","category":"page"},{"location":"50-implementation/#@spec_using","page":"Implementation","title":"@spec_using","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"I can't think of any usecase where a @mixin A, doesn't also mean using ..A. By replacing the @mixin with a using statement, we also no longer need to import @mixin. In fact, that macro becomes redundant. Also, in @spec_using we're allowed multiple @mixin statements.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test-toplevel\n@spec_using module SU_A\nconst X = :hello\nexport X\nend\n\n@spec_using module SU_B\n@mixin SU_A\nconst Y = X\nend\n\n@spec_using module SU_C\nconst Z = :goodbye\nend\n\n@spec_using module SU_D\n@mixin SU_A\n@mixin SU_B, SU_C\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\n@testset \"@spec_using\" begin\n    @test SU_B.Y == SU_A.X\n    @test SU_B.PARENTS == [:SU_A]\n    @test SU_D.PARENTS == [:SU_A, :SU_B, :SU_C]\n    @test SU_D.SU_C.Z == :goodbye\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"We now use the postwalk function (from MacroTools.jl) to transform expressions and collect information into searchable data structures. We make a little abstraction over the postwalk function, so we can compose multiple transformations in a single tree walk.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test-toplevel\nstruct EmptyPass <: Pass\n    tag::Symbol\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\n@testset \"pass composition\" begin\n    a = EmptyPass(:a) + EmptyPass(:b)\n    @test a.parts[1].tag == :a\n    @test a.parts[2].tag == :b\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"A composite pass tries all of its parts in order, returning the value of the first pass that doesn't return nothing.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: spec\n\nabstract type Pass end\n\nfunction pass(x::Pass, expr)\n    error(\"Can't call `pass` on abstract `Pass`.\")\nend\n\nstruct CompositePass <: Pass\n    parts::Vector{Pass}\nend\n\nBase.:+(a::CompositePass...) = CompositePass(splat(vcat)(getfield.(a, :parts)))\nBase.convert(::Type{CompositePass}, a::Pass) = CompositePass([a])\nBase.:+(a::Pass...) = splat(+)(convert.(CompositePass, a))\n\nfunction pass(cp::CompositePass, expr)\n    for p in cp.parts\n        result = pass(p, expr)\n        if result !== :nomatch\n            return result\n        end\n    end\n    return :nomatch\nend\n\nfunction walk(x::Pass, expr_list)\n    function patch(expr)\n        result = pass(x, expr)\n        result === :nomatch ? expr : result\n    end\n    prewalk.(patch, expr_list)\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: spec\n@kwdef struct MixinPass <: Pass\n    items::Vector{Symbol}\nend\n\nfunction pass(m::MixinPass, expr)\n    @capture(expr, @mixin deps_) || return :nomatch\n\n    if @capture(deps, (multiple_deps__,))\n        append!(m.items, multiple_deps)\n        :(\n            begin\n                $([:(using ..$d) for d in multiple_deps]...)\n            end\n        )\n    else\n        push!(m.items, deps)\n        :(using ..$deps)\n    end\nend\n\nmacro spec_using(mod)\n    @assert @capture(mod, module name_ body__ end)\n\n    parents = MixinPass([])\n    clean_body = walk(parents, body)\n\n    esc(Expr(:toplevel, :(module $name\n        $(clean_body...)\n        const AST = $body\n        const PARENTS = [$(QuoteNode.(parents.items)...)]\n    end)))\nend","category":"page"},{"location":"50-implementation/#Structure-of-structs","page":"Implementation","title":"Structure of structs","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"We'll convert struct syntax into collectable data, then convert that back into structs again. We'll support several patterns:","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\ncases = Dict(\n    :(struct A x end) => Struct(false, false, :A, nothing, [:x]),\n    :(mutable struct A x end) => Struct(false, true, :A, nothing, [:x]),\n    :(@kwdef struct A x end) => Struct(true, false, :A, nothing, [:x]),\n    :(@kwdef mutable struct A x end) => Struct(true, true, :A, nothing, [:x]),\n)\n\nfor (k, v) in pairs(cases)\n    @testset \"Struct mangling: $(join(split(string(clean(k))), \" \"))\" begin\n        @test clean(define_struct(parse_struct(k))) == clean(k)\n        @test clean(define_struct(v)) == clean(k)\n    end\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"Each of these can have either just a Symbol for a name, or a A <: B expression. This is a bit cumbersome, but we'll have to deal with all of these cases.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\n@testset \"Struct mangling abstracts\" begin\n    @test parse_struct(:(struct A <: B x end)).abstract_type == :B\n    @test parse_struct(:(mutable struct A <: B x end)).abstract_type == :B\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: struct-data\n\nstruct Struct\n    use_kwdef::Bool\n    is_mutable::Bool\n    name::Symbol\n    abstract_type::Union{Symbol,Nothing}\n    fields::Vector{Union{Expr,Symbol}}\nend\n\nfunction extend_struct!(s1::Struct, s2::Struct)\n    append!(s1.fields, s2.fields)\nend\n\nfunction parse_struct(expr)\n    @capture(expr, (@kwdef kw_struct_expr_) | struct_expr_)\n    uses_kwdef = kw_struct_expr !== nothing\n    struct_expr = uses_kwdef ? kw_struct_expr : struct_expr\n\n    @capture(struct_expr,\n        (struct name_ fields__ end) |\n        (mutable struct mut_name_ fields__ end)) || return\n\n    is_mutable = mut_name !== nothing\n    sname = is_mutable ? mut_name : name\n    @capture(sname, (name_ <: abst_) | name_)\n\n    return Struct(uses_kwdef, is_mutable, name, abst, fields)\nend\n\nfunction define_struct(s::Struct)\n    name = s.abstract_type !== nothing ? :($(s.name) <: $(s.abstract_type)) : s.name\n    sdef = if s.is_mutable\n        :(mutable struct $name\n            $(s.fields...)\n        end)\n    else\n        :(struct $name\n            $(s.fields...)\n        end)\n    end\n    s.use_kwdef ? :(@kwdef $sdef) : sdef\nend","category":"page"},{"location":"50-implementation/#@compose","page":"Implementation","title":"@compose","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"Unfortunately now comes a big leap. We'll merge all struct definitions inside the body of a module definition with that of its parents. We must also make sure that a struct definition still compiles, so we have to take along using and const statements.","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test-toplevel\nmodule ComposeTest1\nusing ModuleMixins\n\n@compose module A\n    struct S\n        a::Int\n    end\nend\n\n@compose module B\n    struct S\n        b::Int\n    end\nend\n\n@compose module AB\n    @mixin A, B\nend\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\n@testset \"compose struct members\" begin\n    @test ComposeTest1.AB.PARENTS == [:A, :B]\n    @test fieldnames(ComposeTest1.AB.S) == (:a, :b)\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: compose\n\nstruct CollectUsingPass <: Pass\n    items::Vector{Expr}\nend\n\nfunction pass(p::CollectUsingPass, expr)\n    @capture(expr, using x__ | using mod__: x__) || return :nomatch\n    push!(p.items, expr)\n    return nothing\nend\n\nstruct CollectConstPass <: Pass\n    items::Vector{Expr}\nend\n\nfunction pass(p::CollectConstPass, expr)\n    @capture(expr, const x_ = y_) || return :nomatch\n    push!(p.items, expr)\n    return nothing\nend\n\nstruct CollectStructPass <: Pass\n    items::IdDict{Symbol,Struct}\nend\n\nfunction pass(p::CollectStructPass, expr)\n    s = parse_struct(expr)\n    s === nothing && return :nomatch\n    if s.name in keys(p.items)\n        extend_struct!(p.items[s.name], s)\n    else\n        p.items[s.name] = s\n    end\n    return nothing\nend\n\n\"\"\"\n    @compose module Name\n        [@mixin Parents, ...]\n        ...\n    end\n\nCreates a new composable module `Name`. Structs inside this module are\nmerged with those of the same name in `Parents`.\n\"\"\"\nmacro compose(mod)\n    @assert @capture(mod, module name_ body__ end)\n\n    mixins = Symbol[]\n    parents = MixinPass([])\n    usings = CollectUsingPass([])\n    consts = CollectConstPass([])\n    structs = CollectStructPass(IdDict())\n\n    function mixin(expr)\n        parents = MixinPass([])\n        pass1 = walk(parents, expr)\n        for p in parents.items\n            p in mixins && continue\n            push!(mixins, p)\n            parent_expr = Core.eval(__module__, :($(p).AST))\n            mixin(parent_expr)\n        end\n        walk(usings + consts + structs, pass1)\n    end\n\n    clean_body = mixin(body)\n\n    esc(Expr(:toplevel, :(module $name\n        const AST = $body\n        const PARENTS = [$(QuoteNode.(mixins)...)]\n        $(usings.items...)\n        $(consts.items...)\n        $(define_struct.(values(structs.items))...)\n        $(clean_body...)\n    end)))\nend","category":"page"},{"location":"50-implementation/#For-each","page":"Implementation","title":"For-each","text":"","category":"section"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"The @for_each macro is meant for situations where you want to call a certain member function for each module that has it defined. Our use case: we have several components that need to write different bits of information to an output file. Each component defines a write(io, data) method. In our composed model, we can now call:","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"@for_each(P->P.write(io, data), PARENTS)","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test-toplevel\nmodule Common\n    export AbstractData\n    abstract type AbstractData end\nend\n\n@compose module WriterA\n    using ..Common\n\n    @kwdef struct Data <: AbstractData\n        a::Int\n    end\n\n    function write(io::IO, data::AbstractData)\n        println(io, data.a)\n    end\nend\n\n@compose module WriterB\n    using ..Common\n    @mixin WriterA\n\n    @kwdef struct Data <: AbstractData\n        b::Int\n    end\n\n    function write(io::IO, data::AbstractData)\n        println(io, data.b)\n    end\nend\n\n@compose module WriterC\nend\n\n@compose module WriterABC\n    using ModuleMixins\n    @mixin WriterB, WriterC\n\n    function write(io::IO, data::AbstractData)\n        @for_each(P->P.write(io, data), PARENTS)\n    end\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: test\n@testset \"for-each\" begin\n    io = IOBuffer(write=true)\n    data = WriterABC.Data(a = 42, b = 23)\n    WriterABC.write(io, data)\n    @test String(take!(io)) == \"23\\n42\\n\"\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"#| id: for-each\nfunction substitute_top_level(var, val, mod, expr)\n    postwalk(function (x)\n        @capture(x, gen_.item_) || return x\n        if gen === var\n            if item in names(mod, all=true)\n                return Expr(:., val, QuoteNode(item))\n            else\n                return Returns(nothing)\n            end\n        end\n        return x\n    end, expr)\nend\n\nmacro for_each(_fun, _lst)\n    @assert @capture(_fun, var_ -> expr_)\n\n    function replace_call_parent(p)\n        mod = Core.eval(__module__, p)\n        substitute_top_level(var, p, mod, expr)\n    end\n\n    lst = Core.eval(__module__, _lst)\n    esc(:(begin\n        $((replace_call_parent(p) for p in lst)...)\n    end))\nend","category":"page"},{"location":"50-implementation/","page":"Implementation","title":"Implementation","text":"","category":"page"},{"location":"30-blog/#Objects,-Inheritance-and-Modules-in-Julia","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Julia is an amazing programming language that finds its use mainly in the hands of scientific modelers. Julia combines a welcoming syntax that doesn't scare new users with stellar performance rivaling C++ and Fortran. While Julia is easy to get into – the basics are a hybrid between Python and Matlab – there are some quirks to the language that change the way you need to think about overall program architecture: there are no objects. However, don't be discouraged: there is a reason for everything. I'll explain not only how we can work around the lack of objects, but also to embrace it! Last but not least, I present a new module to plug the final hole in the sea of abstractions that is left by the absence of objects: mixins, but more on that later.","category":"page"},{"location":"30-blog/#The-JIT-compiler","page":"Objects, Inheritance and Modules in Julia","title":"The JIT compiler","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Julia aims to be both user-friendly and fast to execute. To achieve this, we get the wonderful mix of a dynamically typed language that is compiled to machine instructions, just-in-time (JIT). This works as follows: when a function is called we know the types of the arguments (the type signature) that are given as input, and the compiler generates optimized code for that specific type signature. When the function is called again with the same signature, the compiled version is reused from cache.","category":"page"},{"location":"30-blog/#Multiple-dispatch","page":"Objects, Inheritance and Modules in Julia","title":"Multiple dispatch","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Since the type signature is such an integral part of the execution model, there is a nice trick we can play: multiple dispatch. We can redefine the same method for many different type signatures (similar to function overloading in C++). For instance, the addition operator has (as of Julia 1.10) 189 method implementations.","category":"page"},{"location":"30-blog/#Multiple-dispatch-supersedes-objects","page":"Objects, Inheritance and Modules in Julia","title":"Multiple dispatch supersedes objects","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Multiple dispatch leads us to our first comparison with object oriented languages: abstract method calls are a dispatch on just the first parameter (self or this). In this respect the level of abstraction that multiple dispatch offers is more powerful than the idea of tying method implementations to compound types (i.e. objects). However, object oriented programming is more than just objects. Let's see how Julia compares.","category":"page"},{"location":"30-blog/#Object-Oriented-Programming","page":"Objects, Inheritance and Modules in Julia","title":"Object Oriented Programming","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Object Oriented Programming as we know it today is a group of abstractions guided around the principle of having some way to dynamically look-up a method implementation for some object. I know this skips over the origin and abstract concepts around objects as they were found in the Smalltalk language, but that is besides the point. OOP as we know it is mostly designed around a mostly  antiquated run-time involving pointers and vtables. What I'm getting at, is that the abstractions in a language are often very much guided by the underlying run-time implementation. That means that in C++ the idea of classes makes sense. In Python we already have a very different view of an object, as everything is based around objects being hashmaps with some commonly understood interface. In Julia, having such a different run-time, multiple dispatch makes sense. Quite similar to the idea that the kind of music we make or hear depends on the setting in which it is staged (opera house without electric amplification, a living room setting, a noisy café or earbuds on a daily commute) and the available technology, more so than other cultural considerations. Meanwhile, we have entire schools of thought on how to organise code and design architectures around larger code bases. These ideas have been heavily influenced by the tools of the time: Java and C++. So, all that considered, what do we understand by Object Oriented Programming?","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Compartimenting program state: data hiding, modularization\nMessage passing between objects: similar to above, an object's behaviour can be completely understood from the way we poke sticks at it.\nAbstraction over interfaces: the interface is the outer shell of an object. If the implementations are widely different but the interface is the same, we can freely interchange objects of different types in cases of heterogeneous data.\nInheritance or composition: we can use smaller objects to build larger ones. This can be done by inheritance, whereby the larger object behaves the same as the smaller one, except it can do more. The other way is by composition: we wrap the smaller object into the larger one, defining a new interface, but retaining the functionality.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"In Julia we can achieve all these goals with multiple dispatch, except inheritance. Keep in mind that Julia is a dynamically typed language. Not only that, it fully embraces being dynamically typed through the dispatch mechanism.","category":"page"},{"location":"30-blog/#Functions,-Methods,-Interfaces","page":"Objects, Inheritance and Modules in Julia","title":"Functions, Methods, Interfaces","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Ok, now we know: Julia doesn't have classes. How do we then organize our code? What are the means of abstraction? A common pattern is to define methods around types with similar utility. Suppose we want to write our own collection type, say a circular buffer that overwrites itself, only remembering the last n items that were added.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"mutable struct CircularBuffer{T}\n    content::Vector{T}\n    endloc::Int\n    length::Int\nend\n\nCircularBuffer{T}(size::Int) where T =\n    CircularBuffer{T}(Vector{T}(undef, size), 1, 0)","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"If we want CircularBuffer to behave like other collections in Julia, we need to define some methods.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Base.isempty(b::CircularBuffer{T}) where T = b.length == 0\n\nfunction Base.empty!(b::CircularBuffer{T}) where T\n    b.length = 0\n    b.endloc = 1\nend\n\nBase.length(b::CircularBuffer{T}) where T = b.length\nBase.checked_length(b::CircularBuffer{T}) where T = b.length","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Here we see that we can make methods that are in the standard library operate on our own custom types.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"The weakness in this approach is that none of this is checked at compile time.","category":"page"},{"location":"30-blog/#Composition-over-Inheritance","page":"Objects, Inheritance and Modules in Julia","title":"Composition over Inheritance","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Suppose we're developing something of a graphics library. We have defined a type to work with points:","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"struct Point\n    x::Float64\n    y::Float64\nend\n\nBase.:+(a::Point, b::Point) = Point(a.x+b.x, a.y+b.y)","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Now, we want to add colour to our points. We have a colour type that stores colour as an RGB triple. For convenience, we'll even throw in an abstract type AbstractColour","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"struct Colour\n    r::Float64\n    g::Float64\n    b::Float64\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We could do the following:","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"struct ColouredPoint\n    x::Float64\n    y::Float64\n    colour::Colour\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"For the Point type we had defined an addition operator. How would you define that for the ColouredPoint? How do we handle the colour information?","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"In this example it is quite obvious that the better other option is to use composition.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"struct ColouredPoint\n    point::Point\n    colour::Colour\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"In general, for most cases it is considered best practice to prefer composition over inheritance. Good for us, since Julia does not implement inheritance.","category":"page"},{"location":"30-blog/#Composing-Modules","page":"Objects, Inheritance and Modules in Julia","title":"Composing Modules","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Now I present another example which requires a different form of inheritance, and is not so easily expressed using object composition (of the kind shown above). Moreover, we'll see that we can combine the idea of an interface in Julia with that of a module, creating something that works much the same as a class in other languages.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We need to get an overview of the problem: we'll implement a simple physics model, first without any abstraction. Then we'll use modules and mixins to restructure that code. Along the way you'll learn an interesting fact about physical modelling. We will model a bouncing weight on a spring. The spring exerts a force proportional to the position of the weight.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"(Image: Sketch of our model)","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Such a system is described by having a force proportional and opposite to the relative position of the weight. To model this system, we need to keep track of both the velocity and the position of the object.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Our model has an Input structure to store all the parameters, and a State structure that is updated on every iteration.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"flowchart LR;\n    init(\"initial state\")\n    check{\"t &lt; t<sub>end</sub>?\"}\n    step![\"advance model\"]\n    done(\"end program\")\n\n    init --> step! --> check\n    check -- true --> step!\n    check -- false --> done","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"First of all, the input structure: we need to specify the properties of the spring (spring constant, and weight of the moving object), the specifics of our time integration (in this case, the time step and final time), and the initial conditions. In a larger model there will be many more parameters.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: just-a-spring\nusing Unitful\n\n@kwdef struct Input\n    initial_position::typeof(1.0u\"m\")\n    spring_constant::typeof(1.0u\"N/m\")\n    mass::typeof(1.0u\"kg\")\n    time_step::typeof(1.0u\"s\")\n    time_end::typeof(1.0u\"s\")\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"A typical model will have some mutable State.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: just-a-spring\n@kwdef mutable struct State\n    time::typeof(1.0u\"s\")\n    position::typeof(1.0u\"m\")\n    velocity::typeof(1.0u\"m/s\")\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"The first state is created from the given input. Here, we only configure the initial position of the spring and hard-coded the initial velocity to zero.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: just-a-spring\ninit(input::Input) =\n    State(time = 0.0u\"s\", position = input.initial_position, velocity = 0.0u\"m/s\")","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Then we step! over this state, until some condition is met.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: just-a-spring\nfunction step!(input::Input, state::State)\n    Δt = input.time_step\n    Δx = state.velocity * Δt\n    Δv = -state.position * input.spring_constant / input.mass * Δt\n\n    state.time += Δt\n    state.position += Δx\n    state.velocity += Δv\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We'll go ahead and write the main loop in a generic way.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: just-a-spring\nfunction energy(input::Input, state::State)\n    k = state.velocity^2 * input.mass / 2\n    v = state.position^2 * input.spring_constant / 2\n    return k + v\nend","category":"page"},{"location":"30-blog/#Modules-as-classes","page":"Objects, Inheritance and Modules in Julia","title":"Modules as classes","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"In Julia, modules can be passed around much the same as integers or functions [1]. Given that we expect a module to have an init and step! function as well as a State type, we can write a generic function for running our model.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"[1]: That is, passed around as arguments to functions. However, modules cannot be created dynamically.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We put the previous code inside a module called Spring and then write a run function that turns a module and input record into a sequence of output values.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: spring-model\nmodule Model\n    function run(model::Module, input)\n        state = model.init(input)\n        Channel{model.State}() do ch\n            while state.time < input.time_end\n                model.step!(input, state)\n                put!(ch, deepcopy(state))\n            end\n        end\n    end\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Let's see what this does, by visualizing the output.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"details: Plotting code\n#| id: spring-plot\nfunction plot_result(model, input, output)\n    times = [f.time for f in output]\n    pos = [f.position for f in output]\n\n    fig = Figure()\n    ax1 = Axis(fig[1:2, 1];\n        ylabel = \"position\",\n        dim1_conversion = Makie.UnitfulConversion(u\"s\"),\n        dim2_conversion = Makie.UnitfulConversion(u\"m\"),\n    )\n    lines!(ax1, times, pos)\n    ax2 = Axis(fig[3, 1];\n        ylabel = \"energy\",\n        dim1_conversion = Makie.UnitfulConversion(u\"s\"),\n        dim2_conversion = Makie.UnitfulConversion(u\"J\"),\n    )\n    lines!(ax2, times, [model.energy(input, s) for s in output])\n    fig\nend#| file: examples/just_a_spring.jl\n#| classes: [\"task\"]\n#| creates:\n#|   - docs/src/fig/just-a-spring.svg\n#| collect: figures\nmodule Spring\n    <<just-a-spring>>\nend\n\n<<spring-model>>\n\nmodule Script\n    using Unitful\n    using CairoMakie\n    using ..Spring\n    using ..Model: run\n\n    <<spring-plot>>\n\n    function main()\n        input = Spring.Input(\n            time_step = 0.01u\"s\",\n            time_end = 5.0u\"s\",\n            spring_constant = 50.0u\"N/m\",\n            initial_position = 1.0u\"m\",\n            mass = 1.0u\"kg\",\n        )\n\n        output = run(Spring, input) |> collect\n        fig = plot_result(Spring, input, output)\n        save(\"docs/src/fig/just-a-spring.svg\", fig)\n    end\nend\n\nScript.main()","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"info: Simulation of a spring\n(Image: Output of our spring simulation)Our simulation is running, but there appears to be something wrong here! Why is the amplitude of the oscillation increasing? Remember, we set the initial velocity to 0. After one step of forward Euler integration we have a velocity v  0, but the position is still the same, so the system gets a boost. The integration method is not energy conserving.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Now that we're familiar with the problem, let's try to deconstruct this program into multiple components.","category":"page"},{"location":"30-blog/#With-Mixins","page":"Objects, Inheritance and Modules in Julia","title":"With Mixins","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Now, we implement the same model using ModuleMixins.jl.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| file: examples/mixin_a_spring.jl\n#| classes: [\"task\"]\n#| creates:\n#|   - docs/src/fig/mixin-a-spring.svg\n#| collect: figures\nusing ModuleMixins: @compose\n\n<<spring-model>>\n<<mixin-a-spring>>\n\nScript.main()","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We define some common types:","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: mixin-a-spring\nmodule Common\n    export AbstractInput, AbstractState, Model, run\n\n    abstract type AbstractInput end\n    abstract type AbstractState end\n\n    struct Model{T} end\n\n    function run(model::Type{Model{M}}, input) where M\n        state = M.init(input)\n        Channel{M.State}() do ch\n            while state.time < input.time_end\n                M.step!(input, state)\n                put!(ch, deepcopy(state))\n            end\n        end\n    end\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We split our concerns into a Time module and a Spring module. Both these modules define an Input and State struct as well as the init and step! functions.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: mixin-a-spring\n@compose module Time\n    using Unitful\n    using ..Common\n\n    @kwdef struct Input <: AbstractInput\n        time_step::typeof(1.0u\"s\")\n        time_end::typeof(1.0u\"s\")\n    end\n\n    @kwdef mutable struct State <: AbstractState\n        time::typeof(1.0u\"s\")\n    end\n\n    function init(input::AbstractInput)\n        State(time = 0.0u\"s\")\n    end\n\n    function step!(input::AbstractInput, state::AbstractState; fraction::Float64 = 1.0)\n        state.time += fraction * input.time_step\n    end\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Although the Time model doesn't compute anything interesting, we could call Model.run(Time, Time.Input(0.1u\"s\", 1.0u\"s\")), and collect a series of time coordinates. There is something satisfying about being able to build out complexity from humble beginnings. In the Spring module, we extend the Input and State definitions present in Time and recreate the oscillator model we had before.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: mixin-a-spring\n@compose module Spring\n    @mixin Time\n    using Unitful\n    using ..Common\n\n    @kwdef struct Input <: AbstractInput\n        initial_position::typeof(1.0u\"m\")\n        spring_constant::typeof(1.0u\"N/m\")\n        mass::typeof(1.0u\"kg\")\n    end\n\n    @kwdef mutable struct State <: AbstractState\n        position::typeof(1.0u\"m\")\n        velocity::typeof(1.0u\"m/s\")\n    end\n\n    accelleration(input::AbstractInput, state::AbstractState) =\n        -state.position * input.spring_constant / input.mass\n\n    energy(input::AbstractInput, state::AbstractState) =\n        let k = state.velocity^2 * input.mass / 2,\n            v = state.position^2 * input.spring_constant / 2\n            k + v\n        end\n\n    step!(input::AbstractInput, state::AbstractState) =\n        let a = accelleration(input, state)\n            state.position += state.velocity * input.time_step\n            state.velocity += a * input.time_step\n            Time.step!(input, state)\n        end\n\n    init(input::AbstractInput) =\n        State(time = 0.0u\"s\", position = input.initial_position, velocity = 0.0u\"m/s\")\nend","category":"page"},{"location":"30-blog/#Using-a-better-integrator","page":"Objects, Inheritance and Modules in Julia","title":"Using a better integrator","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"In the first part we saw that there were some shortcomings to the step! method, in that energy was not conserved. The integration method we used is also known as the forward Euler method. There is a better way integrate systems for which energy is conserved, known as the leap-frog method. The idea is to compute the change in velocity and the change in position at times offset by half a time step. These partial step methods are known as kick! (changing the velocity) and drift! (changing the position).","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: mixin-a-spring\nmodule LeapFrog\n    using ..Common\n    using ..Time\n\n    function leap_frog(model::Module)\n        function (input::AbstractInput, state::AbstractState)\n            model.kick!(input, state)\n            Time.step!(input, state; fraction = 0.5)\n            model.drift!(input, state)\n            Time.step!(input, state; fraction = 0.5)\n        end\n    end\n\n    function leap_frog_trait(::Type{Model{T}}) where T\n        function (input::AbstractInput, state::AbstractState)\n            T.kick!(input, state)\n            Time.step!(input, state; fraction = 0.5)\n            T.drift!(input, state)\n            Time.step!(input, state; fraction = 0.5)\n        end\n    end\n\n    leap_frog_front(model::Module) = leap_frog_trait(Model{model})\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Now, let's see if we can extend our previous implementation of Spring to work with the new integrator.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| id: mixin-a-spring\n@compose module LeapFrogSpring\n    @mixin Spring\n    using ..Common\n    using ..Spring: energy, init, accelleration\n    using ..LeapFrog\n\n    Base.convert(::Type{State}, s::Spring.State) =\n\t\tState(time=s.time, position=s.position, velocity=s.velocity)\n\n    kick!(input::AbstractInput, state::AbstractState) =\n        state.velocity += accelleration(input, state) * input.time_step\n\n    drift!(input::AbstractInput, state::AbstractState) =\n        state.position += state.velocity * input.time_step\n\n    const step! = LeapFrog.leap_frog_front(LeapFrogSpring)\n    const step_trait! = LeapFrog.leap_frog_trait(Model{LeapFrogSpring})\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"note: Why the `convert` function?\nNote that the Spring.init function will return a value Spring.State. However, the Model.run function expects a LeapFrogSpring.State instead. I may patch ModuleMixins to create a type alias and not define a new identical type when nothing changes. For the moment, a convert function fixes the situation.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"note: What did we use here?\nAlso note that we didn't do anything strange here. The only thing we used from ModuleMixins is the composition and inheritance of struct definitions. The rest is just using standard Julia modules creatively. Not only did we see inheritance in action, the LeapFrog module could be seen as a transformer, taking one interface (having kick! and drift!), and turning it into another one (generating a step!).","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"info: Result from the Leap-frog integrator\n(Image: Result from the Leap-frog integration)","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"details: Plotting code\n#| id: mixin-a-spring\nmodule Script\n    using Unitful\n    using CairoMakie\n    using ModuleMixins\n\n    using ..Time\n    using ..Spring\n    using ..Common\n    using ..LeapFrogSpring\n\n    <<spring-plot>>\n\n    function main()\n        input = LeapFrogSpring.Input(\n            time_step = 0.01u\"s\",\n            time_end = 5.0u\"s\",\n            spring_constant = 50.0u\"N/m\",\n            initial_position = 1.0u\"m\",\n            mass = 1.0u\"kg\",\n        )\n\n        output = run(LeapFrogSpring, input) |> collect\n        fig = plot_result(LeapFrogSpring, input, output)\n        save(\"docs/src/fig/mixin-a-spring.svg\", fig)\n    end\nend","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"So far, what we did could have been achieved with different techniques, like dispatch and trait types. The real reason why we use ModuleMixins is to handle the composition of data (i.e. struct types and their fields). What we've seen here, is that the way ModuleMixins solves that problem blends nicely with an almost object-oriented style of programming.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We've seen how we can use ModuleMixins to compose models from smaller components. The Time component could be reused for a different model, and we could use what we had (a forward Euler method) and extend it (to Leap-frog method), giving us both reusability and extensibility. ","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Where ModuleMixins is absolutely needed, is when our problem grows in complexity, such that data composition is no longer trivially solved by ordinary object composition. The minimal example of such a problem occurs when we have a diamond shaped dependency tree.","category":"page"},{"location":"30-blog/#Diamond-dependencies","page":"Objects, Inheritance and Modules in Julia","title":"Diamond dependencies","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"There is a case where using a construct similar to ModuleMixins becomes inevitable: the diamond dependency pattern.","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"using ModuleMixins: @compose\n\n@compose module A\n    struct S a::Int end\nend\n\n@compose module B\n    @mixin A\n    struct S b::Int end\nend\n\n@compose module C\n    @mixin A\n    struct S c::Int end\nend\n\n@compose module D\n    @mixin B, C\n    struct S d::Int end\nend\n\nfieldnames(D.S)","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We may draw a dependency diagram for this example:","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"graph TD\n    A(\"A: a\")\n    B(\"B: a b\")\n    C(\"C: a c\")\n    D(\"D: a b c d\")\n\n    A --> B --> D\n    A --> C --> D","category":"page"},{"location":"30-blog/#What-is-special-about-the-diamond?","page":"Objects, Inheritance and Modules in Julia","title":"What is special about the diamond?","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"If we had used composition to create these dependencies, we would have arrived at a different conclusion:","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"graph TD\n    A(\"A: a\")\n    B(\"B: (a) b\")\n    C(\"C: (a) c\")\n    D(\"D: ((a) b) ((a) c) d\")\n\n    A --> B --> D\n    A --> C --> D","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"We end up with two copies of A. We could implement this so that D.b.a and D.c.a point to the same object, but doing so increases the amount of indirection and complexity in our code needlessly.","category":"page"},{"location":"30-blog/#Performance","page":"Objects, Inheritance and Modules in Julia","title":"Performance","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"#| file: examples/spring-benchmark.jl\nusing BenchmarkTools\nusing ModuleMixins: @compose\n\n<<mixin-a-spring>>\n\nmodule RawCompute\n    using ..Common: AbstractInput, Model\n    using ..LeapFrogSpring: Input, State\n    using Unitful\n\n    function run(input::Input)\n        state = State(time = 0.0u\"s\", position = input.initial_position, velocity = 0.0u\"m/s\")\n        n_steps = input.time_end / input.time_step |> Int\n\n        for i = 1:n_steps\n            a = -state.position * input.spring_constant / input.mass\n            state.velocity += a * input.time_step\n            state.position += state.velocity * input.time_step\n        end\n        return state\n    end\n\n    function run_abstract(::Type{Model{T}}, input::AbstractInput) where T\n        state = T.init(input)\n        n_steps = input.time_end / input.time_step |> Int\n\n        for i = 1:n_steps\n            T.step!(input, state)\n        end\n        return state\n    end\n\n    function run_trait(::Type{Model{T}}, input::AbstractInput) where T\n        state = T.init(input)\n        n_steps = input.time_end / input.time_step |> Int\n\n        for i = 1:n_steps\n            T.step_trait!(input, state)\n        end\n        return state\n    end\n\n    run_front(model::Module, input::AbstractInput) = run_abstract(Model{model}, input)\nend\n\nmodule Benchmark\n    using ..LeapFrogSpring\n    using Unitful\n\n    const input = LeapFrogSpring.Input(\n        time_step = 0.01u\"s\",\n        time_end = 5.0u\"s\",\n        spring_constant = 50.0u\"N/m\",\n        initial_position = 1.0u\"m\",\n        mass = 1.0u\"kg\",\n    )\nend\n\nusing .Common\n# @benchmark RawCompute.run(Benchmark.input)\n# @benchmark RawCompute.run_abstract(LeapFrogSpring, Benchmark.input)\n@benchmark RawCompute.run_front(LeapFrogSpring, Benchmark.input)","category":"page"},{"location":"30-blog/#Resources","page":"Objects, Inheritance and Modules in Julia","title":"Resources","text":"","category":"section"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"Matthijs Cox's blog post on fruity design patterns\nEmergent Features of JuliaLang, part II: traits","category":"page"},{"location":"30-blog/","page":"Objects, Inheritance and Modules in Julia","title":"Objects, Inheritance and Modules in Julia","text":"","category":"page"},{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/jhidding/ModuleMixins.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/jhidding/ModuleMixins.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a RP to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/jhidding/ModuleMixins.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Modules = [ModuleMixins]","category":"page"},{"location":"95-reference/#ModuleMixins.@compose-Tuple{Any}","page":"Reference","title":"ModuleMixins.@compose","text":"@compose module Name\n    [@mixin Parents, ...]\n    ...\nend\n\nCreates a new composable module Name. Structs inside this module are merged with those of the same name in Parents.\n\n\n\n\n\n","category":"macro"},{"location":"95-reference/#ModuleMixins.@spec-Tuple{Any}","page":"Reference","title":"ModuleMixins.@spec","text":"@spec module *name*\n    *body*...\nend\n\nCreate a spec. The @spec macro itself doesn't perform any operations other than creating a module and storing its own AST as const *name*.AST.\n\nThis macro is only here for teaching purposes.\n\n\n\n\n\n","category":"macro"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"page"},{"location":"","page":"ModuleMixins","title":"ModuleMixins","text":"CurrentModule = ModuleMixins","category":"page"},{"location":"#ModuleMixins","page":"ModuleMixins","title":"ModuleMixins","text":"","category":"section"},{"location":"","page":"ModuleMixins","title":"ModuleMixins","text":"Documentation for ModuleMixins.","category":"page"},{"location":"","page":"ModuleMixins","title":"ModuleMixins","text":"ModuleMixins is a way of composing families of struct definitions on a module level. Suppose we have several modules that contain structs of the same name. We can compose these modules such that all the structs they have in common are merged. Methods that work on one component should now work on the composed type.","category":"page"},{"location":"","page":"ModuleMixins","title":"ModuleMixins","text":"info: Info\nMost problems with object type abstraction can be solved in Julia by cleverly using abstract types and multiple dispatch. Use ModuleMixins only after you have convinced yourself you absolutely need it.","category":"page"},{"location":"","page":"ModuleMixins","title":"ModuleMixins","text":"Introduction\nExample\nImplementation","category":"page"},{"location":"#Contributors","page":"ModuleMixins","title":"Contributors","text":"","category":"section"},{"location":"","page":"ModuleMixins","title":"ModuleMixins","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"},{"location":"","page":"ModuleMixins","title":"ModuleMixins","text":"","category":"page"},{"location":"10-introduction/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"using ModuleMixins\n\n@compose module A\n  struct S\n    a\n  end\nend\n\n@compose module B\n  @mixin A\n\n  struct S\n    b\n  end\nend\n\nfieldnames(B.S)","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"A struct within a composed module can be mutable and/or @kwdef, abstract base types are also forwarded. All using and const statements are forwarded to the derived module, so that field types still compile.","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"using ModuleMixins\n\n@compose module A\n  const V = Vector{Int}\n  struct S\n    a::V\n  end\nend\n\n@compose module B\n  @mixin A\nend\n\ntypeof(B.S([42]).a)","category":"page"},{"location":"10-introduction/#Diamond-pattern","page":"Introduction","title":"Diamond pattern","text":"","category":"section"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"The following pattern of multiple inheritence should work:","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"using ModuleMixins: @compose\n\n@compose module A\n    struct S a::Int end\nend\n\n@compose module B\n    @mixin A\n    struct S b::Int end\nend\n\n@compose module C\n    @mixin A\n    struct S c::Int end\nend\n\n@compose module D\n    @mixin B, C\n    struct S d::Int end\nend\n\nfieldnames(D.S)","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"The type D.S now has fields a, b, c and d.","category":"page"},{"location":"10-introduction/#Motivation-from-OOP","page":"Introduction","title":"Motivation from OOP","text":"","category":"section"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"Julia is not an object oriented programming (OOP) language. In general, when one speaks of object orientation a mix of a few related concepts is meant:","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"Compartimenting program state.\nMessage passing between entities.\nAbstraction over interfaces.\nInheritence or composition.","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"Where in other languages these concepts are mostly covered by classes, in Julia most of the patterns that are associated with OOP are implemented using multiple dispatch.","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"The single concept that is not covered by the Julia language or the standard library is inheritance or object composition. Suppose we have two types along with some methods (in the real world these would be much more extensive structs):","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"struct A\n    x::Int\nend\n\namsg(a::A) = \"Hello $(a.x)\"\n\nstruct B\n    y::Int\nend\n\nbmsg(b::B) = \"Goodbye $(b.y)\"","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"Now, for some reason you want to compose those types so that amsg and bmsg can be called on our new type.","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"struct C\n    x::Int\n    y::Int\nend\n\namsg(c::C) = amsg(A(c.x))\nbmsg(c::C) = bmsg(B(c.y))","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"There are some downsides to this: we needed to copy data from C into the more primitive types A and B. We could get around this by removing the types from the original method implementations. Too strict static typing can be a bad thing in Julia!","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"An alternative approach would be to define C differently:","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"struct C\n    a::A\n    b::B\nend","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"We would need to abstract over member access using getter and setter methods. When objects grow a bit larger, this type of compositon comes with a lot of boilerplate code. In Julia this is synonymous to: we need macros.","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"There we have it: if we want any form of composition or inheritance in our types, we need macros to support us.","category":"page"},{"location":"10-introduction/","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"20-example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"20-example/","page":"Example","title":"Example","text":"It cannot be helped that this example will seem a bit contrived.","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"We're modelling the movement of a spring. It can be useful to put some common definitions in a separate module.","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"#| file: examples/spring.jl\n\nusing ModuleMixins\nusing CairoMakie\nusing Unitful\n\nmodule Common\n    abstract type AbstractInput end\n    abstract type AbstractState end\n\n    function initial_state(input::AbstractInput)\n        error(\"Can't construct from AbstractInput\")\n    end\n\n    export AbstractInput, AbstractState, initial_state\nend\n\n<<example-time>>\n<<example-spring>>\n<<example-run>>","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"The model has input parameters and a mutable state. We'll have a time component:","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"#| id: example-time\n\n@compose module Time\n    using Unitful\n    using ..Common\n\n    @kwdef struct Input <: AbstractInput\n        t_step::typeof(1.0u\"s\")\n        t_end::typeof(1.0u\"s\")\n    end\n\n    mutable struct State <: AbstractState\n        time::typeof(1.0u\"s\")\n    end\n\n    function step!(input::AbstractInput, state::AbstractState)\n        state.time += input.t_step\n    end\n\n    function run(model, input::AbstractInput)\n        s = model.initial_state(input)\n        Channel() do ch\n            while s.time < input.t_end\n                model.step!(input, s)\n                put!(ch, deepcopy(s))\n            end\n        end\n    end\nend","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"Note that the run function is generic. And a component for the spring.","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"#| id: example-spring\n\n@compose module Spring\n    @mixin Time\n    using ..Common\n    using Unitful\n\n    @kwdef struct Input <: AbstractInput\n        spring_constant::typeof(1.0u\"s^-2\")\n        initial_position::typeof(1.0u\"m\")\n    end\n\n    mutable struct State <: AbstractState\n        position::typeof(1.0u\"m\")\n        velocity::typeof(1.0u\"m/s\")\n    end\n\n    function step!(input::AbstractInput, state::AbstractState)\n        delta_v = -input.spring_constant * state.position\n        state.position += state.velocity * input.t_step\n        state.velocity += delta_v * input.t_step\n    end\nend","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"Now we may compose these using @mixin:","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"#| id: example-run\n\n@compose module Model\n    @mixin Time, Spring\n    using ..Common\n    using Unitful\n\n    function step!(input::Input, state::State)\n        Spring.step!(input, state)\n        Time.step!(input, state)\n    end\n\n    function initial_state(input::Input)\n        return State(0.0u\"s\", input.initial_position, 0.0u\"m/s\")\n    end\nend","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"And see the result.","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"#| id: example-run\n\nfunction plot_result()\n    input = Model.Input(\n        t_step = 0.001u\"s\",\n        t_end = 1.0u\"s\",\n        spring_constant = 250.0u\"s^-2\",\n        initial_position = 1.0u\"m\",\n    )\n\n    output = Time.run(Model, input) |> collect\n    times = [f.time for f in output]\n    pos = [f.position for f in output]\n\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n    lines!(ax, times, pos)\n    save(\"docs/src/fig/plot.svg\", fig)\nend\n\nplot_result()","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"(Image: Example output)","category":"page"},{"location":"20-example/","page":"Example","title":"Example","text":"","category":"page"}]
}
